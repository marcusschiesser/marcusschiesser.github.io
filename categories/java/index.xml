<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/categories/java/</link>
    <description>Recent content in Java on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Jan 2013 00:17:11 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to use JSF 2.2 with JBoss 7.1</title>
      <link>https://marcusschiesser.github.io/2013/01/17/how-to-use-jsf-2-2-with-jboss-7-1/</link>
      <pubDate>Thu, 17 Jan 2013 00:17:11 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2013/01/17/how-to-use-jsf-2-2-with-jboss-7-1/</guid>
      <description>As the new JSF 2.2 is nearly finished, we all want to play with the new features of it.
Markus Eisele has shown in his blog post Testdriving Mojarra 2.2.0-m08 how to do this with Glassfish 3. He&amp;rsquo;s German too, I begin to wonder if only we guys are that curious or no one else is using JSF any more ;)
Unfortunately with JBoss 7 we face the same problem he had: We can not just add the new libraries to our WAR archive as they will clash with the JSF 2.</description>
    </item>
    
    <item>
      <title>Doing EJB-like transactions with Google App Engine</title>
      <link>https://marcusschiesser.github.io/2013/01/05/doing-ejb-like-transactions-with-google-app-engine/</link>
      <pubDate>Sat, 05 Jan 2013 12:10:03 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2013/01/05/doing-ejb-like-transactions-with-google-app-engine/</guid>
      <description>Using Google App Engine you can&amp;rsquo;t define a method as transactional with a simple annotation as you can in EJB. You always need to call some boilerplate code which gets quite annoying. Therefore the following utility class comes handy, which takes care of the transaction handling for you:
https://gist.github.com/marcusschiesser/5474348
To make use of it, you have to set the same persistence unit as in your persistence.xml configuration file first. Do this by changing the parameter of the method createEntityManagerFactory.</description>
    </item>
    
    <item>
      <title>Using the Facebook Graph API from your GWT application</title>
      <link>https://marcusschiesser.github.io/2013/01/03/using-the-facebook-graph-api-from-your-gwt-application/</link>
      <pubDate>Thu, 03 Jan 2013 13:49:30 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2013/01/03/using-the-facebook-graph-api-from-your-gwt-application/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Storing files RESTful in the cloud using Google App Engine</title>
      <link>https://marcusschiesser.github.io/2011/12/01/storing-files-restful-in-the-cloud-using-google-app-engine/</link>
      <pubDate>Thu, 01 Dec 2011 17:09:27 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2011/12/01/storing-files-restful-in-the-cloud-using-google-app-engine/</guid>
      <description>Do you want to store files RESTful in the cloud? Why not use the Google App Engine for it?
Firstly you will need a entity class that is storing the file in the data store:
@Entity public class FileEntity { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long key; private Blob content; private String mediaType; public Long getKey() { return key; } public Blob getContent() { return content; } public void setContent(Blob content) { this.</description>
    </item>
    
    <item>
      <title>Using real POJOs (without JAXB Annotations) as transfer objects with JAX-RS </title>
      <link>https://marcusschiesser.github.io/2011/12/01/using-real-pojos-without-jaxb-annotations-as-transfer-objects-with-jax-rs/</link>
      <pubDate>Thu, 01 Dec 2011 16:06:30 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2011/12/01/using-real-pojos-without-jaxb-annotations-as-transfer-objects-with-jax-rs/</guid>
      <description>Are you annoyed that you have to annotate your POJOs with @XmlRootElement, so they can be used with JAX-RS? If your using Jersey as JAX-RS implementation your lucky: Just add to the &amp;lt;servlet&amp;gt; tag in your web.xml the following snippet:
&amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;com.sun.jersey.api.json.POJOMappingFeature&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt;  After restarting your servlet, your POJOs are marshalled to JSON as a charme. Enjoy!</description>
    </item>
    
    <item>
      <title>Let the user change the column order in Java/Swing</title>
      <link>https://marcusschiesser.github.io/2011/11/18/let-the-user-change-the-column-order-in-javaswing/</link>
      <pubDate>Fri, 18 Nov 2011 14:36:15 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2011/11/18/let-the-user-change-the-column-order-in-javaswing/</guid>
      <description>Do you have the requirement to let the user of your application change the order of his columns and your app is based on Swing?
Then you should read further. Below you find a [TableColumnModel](http://download.oracle.com/javase/1.4.2/docs/api/javax/swing/table/TableColumnModel.html) that has two states: STANDARD and USERDEFINED. In the STANDARD state the user may not change the order of the columns by drag&amp;rsquo;n&amp;rsquo;drop, in USERDEFINED he may. The good thing: If you toogle the state the column order is restored.</description>
    </item>
    
    <item>
      <title>Openbahn-API – Bahn-Webseite als Webservice</title>
      <link>https://marcusschiesser.github.io/2011/06/22/openbahn-api-%e2%80%93-bahn-webseite-als-webservice/</link>
      <pubDate>Wed, 22 Jun 2011 20:13:17 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2011/06/22/openbahn-api-%e2%80%93-bahn-webseite-als-webservice/</guid>
      <description>As this is only of interest for German users - this article is in German only. It&amp;rsquo;s about a new project of mine. Sorry folks.
Ich bin gerade dabei eine Android-App zu entwickeln, mit der es möglich ist Fahrkarten für Bahn-Pendler einfacher zu buchen. Bei der Entwicklung ist mir aufgefallen, dass die Bahn leider keine Webservices nach außen zur Verfügung stellt – die Webseite www.bahn.de ist zusammen mit der mobilen Variante m.</description>
    </item>
    
    <item>
      <title>Using Axis2 services from Javascript (by removing the XML namespaces)</title>
      <link>https://marcusschiesser.github.io/2009/01/27/using-axis2-services-from-javascript-by-removing-the-xml-namespaces/</link>
      <pubDate>Tue, 27 Jan 2009 17:15:13 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/01/27/using-axis2-services-from-javascript-by-removing-the-xml-namespaces/</guid>
      <description>If you want to call an Axis2 service from Javascript you will face the problem that the XML response of an Axis2 service call contains XML namespaces - something Javascript doesn&amp;rsquo;t like in cross-browser-friendly way. The idea to fix this issue is to make an XSLT transformation directly from Axis2 that removes the unnecessary namespaces.
First we need an XSLT transformation that will do the job:
&amp;lt;xsl:stylesheet version=&amp;quot;1.0&amp;quot; xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&amp;gt; &amp;lt;xsl:output indent=&amp;quot;no&amp;quot; method=&amp;quot;xml&amp;quot;&amp;gt;&amp;lt;/xsl:output&amp;gt; &amp;lt;xsl:template match=&amp;quot;/|comment()|processing-instruction()&amp;quot;&amp;gt; &amp;lt;xsl:copy&amp;gt; &amp;lt;xsl:apply-templates&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt; &amp;lt;/xsl:copy&amp;gt; &amp;lt;/xsl:template&amp;gt; &amp;lt;xsl:template match=&amp;quot;*&amp;quot;&amp;gt; &amp;lt;xsl:element name=&amp;quot;{local-name()}&amp;quot;&amp;gt; &amp;lt;xsl:apply-templates select=&amp;quot;@*|node()&amp;quot;&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt; &amp;lt;/xsl:element&amp;gt; &amp;lt;/xsl:template&amp;gt; &amp;lt;xsl:template match=&amp;quot;@*&amp;quot;&amp;gt; &amp;lt;xsl:attribute name=&amp;quot;{local-name()}&amp;quot;&amp;gt; &amp;lt;xsl:value-of select=&amp;quot;.</description>
    </item>
    
    <item>
      <title>Building a JSON web service with Java and Axis2</title>
      <link>https://marcusschiesser.github.io/2009/01/23/building-a-json-web-service-with-java-and-axis2/</link>
      <pubDate>Fri, 23 Jan 2009 15:05:04 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/01/23/building-a-json-web-service-with-java-and-axis2/</guid>
      <description>It is said that in Java usually the easiest things are the hardest. The following is a nice example as it took me some time to figure out how to do it. I wanted to build a simple URL request based web service in Java that returns an JSON object. Yes, you can do that with a simple Servlet too, the advantage of using Axis2 is that you can also call your deployed services using SOAP without any configuration changes.</description>
    </item>
    
  </channel>
</rss>
