<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Technology on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/categories/technology/</link>
    <description>Recent content in Technology on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 18 Nov 2011 14:36:15 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Let the user change the column order in Java/Swing</title>
      <link>https://marcusschiesser.github.io/2011/11/18/let-the-user-change-the-column-order-in-javaswing/</link>
      <pubDate>Fri, 18 Nov 2011 14:36:15 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2011/11/18/let-the-user-change-the-column-order-in-javaswing/</guid>
      <description>Do you have the requirement to let the user of your application change the order of his columns and your app is based on Swing?
Then you should read further. Below you find a [TableColumnModel](http://download.oracle.com/javase/1.4.2/docs/api/javax/swing/table/TableColumnModel.html) that has two states: STANDARD and USERDEFINED. In the STANDARD state the user may not change the order of the columns by drag&amp;rsquo;n&amp;rsquo;drop, in USERDEFINED he may. The good thing: If you toogle the state the column order is restored.</description>
    </item>
    
    <item>
      <title>How to detect whether an element is in a scrollable parent </title>
      <link>https://marcusschiesser.github.io/2009/11/02/how-to-detect-whether-an-element-is-in-a-scrollable-parent/</link>
      <pubDate>Mon, 02 Nov 2009 20:54:28 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/11/02/how-to-detect-whether-an-element-is-in-a-scrollable-parent/</guid>
      <description>Just think of having an element in a scrollable parent (the CSS property overflow is set to scroll) and you want to test whether the element is visible or not.
Using this little function you can do the trick:
function isInView(node){ var offsetParent = node.offsetParent; var top = offsetParent.scrollTop; var height = offsetParent.offsetHeight; var y = node.offsetTop; return y &amp;gt;= top &amp;amp;&amp;amp; y &amp;lt;= (top + height); } And here&amp;rsquo;s a small use case - this one scrolls the element into the visible region, if it is not already in the view:</description>
    </item>
    
    <item>
      <title>Phone number selector in ExtJS</title>
      <link>https://marcusschiesser.github.io/2009/04/08/phone-number-selector-in-extjs/</link>
      <pubDate>Wed, 08 Apr 2009 17:10:42 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/04/08/phone-number-selector-in-extjs/</guid>
      <description>Wouldn&amp;rsquo;t it be nice to use a combo box of flag images to select the country code of phone numbers?
If you use a country selection component that&amp;rsquo;s quite easy. Just wrap it in a re-usable component together with a textfield for the local number and the result looks like this:
And here&amp;rsquo;s the example&amp;rsquo;s source:
Ext.onReady(function(){ var panel = new Ext.FormPanel({ style: &#39;padding: 10px;&#39;, frame: true, labelWidth: 50, width: 400, items: [{ fieldLabel: &#39;Mobile&#39;, xtype: &#39;phonefield&#39;, anchor: &#39;100%&#39;, emptyText: &#39;(e.</description>
    </item>
    
    <item>
      <title>Component for selecting multiple items in Ext</title>
      <link>https://marcusschiesser.github.io/2009/04/08/component-for-selecting-multiple-items-in-ext/</link>
      <pubDate>Wed, 08 Apr 2009 16:52:08 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/04/08/component-for-selecting-multiple-items-in-ext/</guid>
      <description>Ext already provides a component to select multiple items. The thing I do not like about it is that it covers too much space on the screen. Therefore I thought of a component that initially looks like a combo box and then opens a new window to let the user select the items.
As a nice example tells more than thousand words - here it is:
As you can see, it is actually based on the component provided by the Ext examples.</description>
    </item>
    
    <item>
      <title>Generic error handler for ExtJS</title>
      <link>https://marcusschiesser.github.io/2009/02/09/generic-error-handler-for-extjs/</link>
      <pubDate>Mon, 09 Feb 2009 10:40:08 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/02/09/generic-error-handler-for-extjs/</guid>
      <description>When you are doing client/server communication with ExtJS you probably run into the problem that you want to handle server side errors in a generic way. A solution that I found is to override the handleFailure function in the Ext.data.Connection class:
Ext.data.Connection.prototype._handleFailure = Ext.data.Connection.prototype.handleFailure; Ext.data.Connection.prototype.handleFailure = function(response, e) { var errorText = Ext.DomQuery.selectValue(&amp;quot;Reason/Text&amp;quot;, response.responseXML, &amp;quot;Unknown Error&amp;quot;); Ext.Msg.alert(&#39;Error&#39;, errorText); Ext.data.Connection.prototype._handleFailure.call(this, response, e); }; This handler simply is called whenever a server side failure occurs.</description>
    </item>
    
    <item>
      <title>3 Ways to render HTML inside of a ExtJS container</title>
      <link>https://marcusschiesser.github.io/2009/01/14/3-ways-to-render-html-inside-of-a-extjs-container/</link>
      <pubDate>Wed, 14 Jan 2009 14:23:43 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/01/14/3-ways-to-render-html-inside-of-a-extjs-container/</guid>
      <description>It has been a while since my last blog post. The main reason is that I am now having a nice new job at efiport which leads to the situation that I am doing now good old Javascript (mainly ExtJS) instead of Flex. So I think in the future there will be more posts about ExtJS then Flex. Sorry Flex folks.
To tribute the change a bit, I start with the problem of adding HTML code inside of a ExtJS container.</description>
    </item>
    
    <item>
      <title>Pageflakes - Das Do-It-Yourself Portal</title>
      <link>https://marcusschiesser.github.io/2007/01/05/pageflakes-das-do-it-yourself-portal/</link>
      <pubDate>Fri, 05 Jan 2007 11:35:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2007/01/05/pageflakes-das-do-it-yourself-portal/</guid>
      <description>Unter der Rubrik &amp;lsquo;Dinge die uns Internehmern helfen&amp;rsquo; fällt der Dienst Pageflakes. Eigentlich kann man mit Pageflakes eine personalisierte Startseite erstellen und andere Internetdienste (z.B. Feeds, Mail, Videos) sehr einfach in diese integrieren. Hierzu stellt Pageflake sogenannte Flakes zur Verfügung - kleine Webmodule, die den jeweiligen einzubindenden Service repräsentieren (Javaleuten ist das Konzept unter dem Begriff Portlet bekannt). Netterweise (und hier wird die Sache auch für Internehmer spannend) kann man diese Flakes auch in seine eigene Seite einbinden - hierzu ein Beispiel (die Auswahl wurde etwas von der Bubble 2.</description>
    </item>
    
    <item>
      <title>Dapper - und Programmieren wird zur Kunst</title>
      <link>https://marcusschiesser.github.io/2007/01/03/dapper-und-programmieren-wird-zur-kunst/</link>
      <pubDate>Wed, 03 Jan 2007 10:50:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2007/01/03/dapper-und-programmieren-wird-zur-kunst/</guid>
      <description>Für diejenigen unter Euch, die es noch nicht kennen sollten: Mit Dapper erstellt man ohne Programmierung (auch keine regulären Ausdrücke, oder sonstige Dinge, die nur Informatiker verstehen) durch ein paar Klicks Webservices, die Daten aus beliebigen Webseiten extrahieren. Da das natürlich manchmal auch noch zuviel Arbeit darstellt, werden die Services (die heissen dann Dapps) unter den Benutzern geshared. Sehr praktisch für Mashups (so ne Art Collage für faule Programmierer wie mich) - Hier eine Demo.</description>
    </item>
    
    <item>
      <title>Ning - die Internehmerspielwiese</title>
      <link>https://marcusschiesser.github.io/2006/12/30/ning-die-internehmerspielwiese/</link>
      <pubDate>Sat, 30 Dec 2006 22:04:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2006/12/30/ning-die-internehmerspielwiese/</guid>
      <description>Unter Ning findet der angehende Internehmer eine interessante Plattform, um schnell Social Applications (wir unterlassen mal die akute Versionierungsmanie für das Wort Web) zu erstellen. Praktisch ist, dass nicht nur eine komplette API und Vorlagen zur Verfügung gestellt werden, sondern dass auch das komplette Hosting übernommen wird. Um das Ganze einmal auszuprobieren habe ich gleich eine Internehmer-Seite angelegt - mit dem Ziel Kontakt zwischen einzelnen Internehmern zu fördern.</description>
    </item>
    
  </channel>
</rss>
