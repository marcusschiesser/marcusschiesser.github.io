<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring Splunk Instances Running K8s</title>
      <link>https://marcusschiesser.github.io/2022/10/27/configuring-splunk-instances-running-k8s/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/10/27/configuring-splunk-instances-running-k8s/</guid>
      <description>The recommendations to configure Splunk instances that are running on K8S using the Splunk operator is by bundling .conf files in Splunk apps.
Unfortunately some things can&amp;rsquo;t be configured with Splunk apps, e.g. adding a user. Then you have two options:
Adding the user manually via CLI or UI and therefore not having the configuration in Git OR Deploying a second instance in K8S that is doing the configuration for the first instance Here&amp;rsquo;s the deployment YAML for this second option:</description>
    </item>
    
    <item>
      <title>Copy K8s Secrets Between Namespaces With Updating</title>
      <link>https://marcusschiesser.github.io/2022/08/09/copy-k8s-secrets-between-namespaces-with-updating/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/08/09/copy-k8s-secrets-between-namespaces-with-updating/</guid>
      <description>K8S doesn&amp;rsquo;t allow to share secrets between namespaces for security reasons.
It might be acceptable from a security point of view to share secrets nevertheless - then a common workaround is to copy secrets between namespaces. One pattern is to keep a template of the secret in the default namespace and copy it from there to other namespaces.
Here&amp;rsquo;s a version of copying secrets between namespaces that also works if the destination secret already exists - in this case it&amp;rsquo;s just updated with the data from the source:</description>
    </item>
    
    <item>
      <title>Injecting passwords from Kubernetes secrets into Splunk config files</title>
      <link>https://marcusschiesser.github.io/2022/06/24/injecting-passwords-from-kubernetes-secrets-into-splunk-config-files/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/06/24/injecting-passwords-from-kubernetes-secrets-into-splunk-config-files/</guid>
      <description>Currently, the Splunk K8S operator doesn&amp;rsquo;t support injecting passwords from Kubernetes secrets into the Splunk config. The workaround is to store a complete configuration file as a secret, see https://github.com/splunk/splunk-operator/issues/657
As configuration files can be quite large, I created a small bash script that is using template files for the configuration and filling in the secrets based on user input. You can create the K8S secret containing the configuration by calling:</description>
    </item>
    
    <item>
      <title>Storing Splunk Configuration for Kubernetes in Git</title>
      <link>https://marcusschiesser.github.io/2022/05/09/storing-splunk-configuration-for-kubernetes-in-git/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/05/09/storing-splunk-configuration-for-kubernetes-in-git/</guid>
      <description>After having discussions about how to use Gitops with Splunk, I created this template to store the complete configuration (apps and system configuration) of a Splunk installation running on Kubernetes in Git:
https://github.com/marcusschiesser/splunk-gitops.
Having the complete configuration in a single repository is an important prerequisite to enjoy the benefits of GitOps.
To ensure that this template is running with future versions of Splunk, it is solely extending Splunk Docker images according to the docker-splunk configuration.</description>
    </item>
    
    <item>
      <title>Adding ReadWriteMany Storage To An EKS Cluster</title>
      <link>https://marcusschiesser.github.io/2022/04/28/adding-read-write-many-storage-to-an-eks-cluster/</link>
      <pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/04/28/adding-read-write-many-storage-to-an-eks-cluster/</guid>
      <description>I needed an EKS cluster that supports Persistent Volumes with Access Mode ReadWriteMany.
Therefore I updated my EKS Terraform template to support adding the EFS CSI driver if needed.
Usage is pretty simple, you&amp;rsquo;ll just have to add enable_efs = true to your Terraform cluster definition.
This will also create an EFS file system (storage will by provisioned dynamically depending on the requested persistent volume).
You&amp;rsquo;ll just have to retrieve the file system ID from your AWS console and use it to create a new K8S storage class:</description>
    </item>
    
    <item>
      <title>Liveness And Readiness Checks For Splunk In K8s</title>
      <link>https://marcusschiesser.github.io/2022/04/15/liveness-and-readiness-checks-for-splunk-in-k8s/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/04/15/liveness-and-readiness-checks-for-splunk-in-k8s/</guid>
      <description>Usually, you&amp;rsquo;ll use the Splunk Operator to run Splunk on K8S. There are some use cases where you might want to run Splunk without the operator though.
As with any deployment, it&amp;rsquo;s good practice then to add liveness probes to restart Splunk if it&amp;rsquo;s not healthy anymore.
Furthermore, as the Splunk container needs about one minute to startup, I&amp;rsquo;ll recommend adding a readiness probe. This ensures that no traffic is sent to a pod as long as Splunk hasn&amp;rsquo;t been fully started yet.</description>
    </item>
    
  </channel>
</rss>
