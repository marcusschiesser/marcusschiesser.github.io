<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Splunk on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/tags/splunk/</link>
    <description>Recent content in Splunk on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/tags/splunk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Storing Splunk Configuration for Kubernetes in Git</title>
      <link>https://marcusschiesser.github.io/2022/05/09/storing-splunk-configuration-for-kubernetes-in-git/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/05/09/storing-splunk-configuration-for-kubernetes-in-git/</guid>
      <description>After having discussions about how to use Gitops with Splunk, I created this template to store the complete configuration (apps and system configuration) of a Splunk installation running on Kubernetes in Git:
https://github.com/marcusschiesser/splunk-gitops.
Having the complete configuration in a single repository is an important prerequisite to enjoy the benefits of GitOps.
To ensure that this template is running with future versions of Splunk, it is solely extending Splunk Docker images according to the docker-splunk configuration.</description>
    </item>
    
    <item>
      <title>Liveness And Readiness Checks For Splunk In K8s</title>
      <link>https://marcusschiesser.github.io/2022/04/15/liveness-and-readiness-checks-for-splunk-in-k8s/</link>
      <pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/04/15/liveness-and-readiness-checks-for-splunk-in-k8s/</guid>
      <description>Usually, you&amp;rsquo;ll use the Splunk Operator to run Splunk on K8S. There are some use cases where you might want to run Splunk without the operator though.
As with any deployment, it&amp;rsquo;s good practice then to add liveness probes to restart Splunk if it&amp;rsquo;s not healthy anymore.
Furthermore, as the Splunk container needs about one minute to startup, I&amp;rsquo;ll recommend adding a readiness probe. This ensures that no traffic is sent to a pod as long as Splunk hasn&amp;rsquo;t been fully started yet.</description>
    </item>
    
    <item>
      <title>Running Mapped Subsearches Without Limits In Splunk</title>
      <link>https://marcusschiesser.github.io/2022/03/27/running-mapped-subsearches-without-limits-in-splunk/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/03/27/running-mapped-subsearches-without-limits-in-splunk/</guid>
      <description>If you&amp;rsquo;re running saved searches in Splunk as subsearches inside of the map command, they are bound by the subsearch limitation.
This is an alternative command that doesn&amp;rsquo;t have this limitation as it starts a new job for each subsearch.
 To use it, instead of calling:
| makeresults | map test You&amp;rsquo;re using:
| makeresults | mapsearch search=test Missing the full flexibility of map, the command also passes each event&amp;rsquo;s values as input parameters to each called saved search.</description>
    </item>
    
    <item>
      <title>Converting Simplified Extended ISO8601 In Splunk</title>
      <link>https://marcusschiesser.github.io/2022/03/23/converting-simplified-extended-iso8601-in-splunk/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/03/23/converting-simplified-extended-iso8601-in-splunk/</guid>
      <description>Wonder how to use the ISO8601 format in Splunk?
Simplified extended ISO8601 is for example used in Javascript&amp;rsquo;s toISOString function.
It&amp;rsquo;s a great way (readable and to timezone agnostic) to exchange timestamps between Splunk and Splunk Apps.
Here&amp;rsquo;s how it&amp;rsquo;s done:
 </description>
    </item>
    
    <item>
      <title>Using URL path parameters in Splunk REST endpoints</title>
      <link>https://marcusschiesser.github.io/2021/12/21/using-url-path-parameters-in-splunk-rest-endpoints/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/12/21/using-url-path-parameters-in-splunk-rest-endpoints/</guid>
      <description>If you wonder how to pass an URL path parameter to your custom REST endpoint in Splunk, please have a look:
 </description>
    </item>
    
    <item>
      <title>Enforce arrays for multi-values in Splunk searches</title>
      <link>https://marcusschiesser.github.io/2021/12/20/enforce-arrays-for-multi-values-in-splunk/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/12/20/enforce-arrays-for-multi-values-in-splunk/</guid>
      <description>The Splunk SDK for Python is returning for multi-values that only have one entry a string instead of an array. To enforce arrays, you can do the following workaround:
 </description>
    </item>
    
    <item>
      <title>More than 100 results using the search-job API in Splunk</title>
      <link>https://marcusschiesser.github.io/2021/12/14/more-than-100-results-using-the-search-job-api/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/12/14/more-than-100-results-using-the-search-job-api/</guid>
      <description>If you’re using the @splunk/search-job API and want to return more than the 100 results (the default value), you’ll have to pass count to the getResults function, e.g.:
new SearchJob.create({  search: myQuery, }).getResults({ count: 500 }); </description>
    </item>
    
    <item>
      <title>Mapping types using the Splunk search-job API</title>
      <link>https://marcusschiesser.github.io/2021/12/09/mapping-types-using-the-splunk-search-job-api/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/12/09/mapping-types-using-the-splunk-search-job-api/</guid>
      <description>In case you’re using the @splunk/search-job API you might find it annoying that the properties of the returned objects are all of type string. To fix this, I wrote a little type mapper (The unit test shows how to use it):
 </description>
    </item>
    
    <item>
      <title>Using the Dashboard API from a Splunk visualization</title>
      <link>https://marcusschiesser.github.io/2021/11/25/using-the-dashboard-api-from-a-splunk-visualization/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/11/25/using-the-dashboard-api-from-a-splunk-visualization/</guid>
      <description>How to use the Dashboard API from a Splunk visualization (e.g. to reload the datasource):
 </description>
    </item>
    
    <item>
      <title>Connect a datasource to a Splunk visualization</title>
      <link>https://marcusschiesser.github.io/2021/11/24/connect-a-datasource-to-a-splunk-visualization/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/11/24/connect-a-datasource-to-a-splunk-visualization/</guid>
      <description>How to programmatically connect a search datasource to a Splunk visualization (without using the dashboard):
 </description>
    </item>
    
    <item>
      <title>Run any React app as a Splunk app</title>
      <link>https://marcusschiesser.github.io/2021/11/23/run-any-react-app-as-a-splunk-app/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/11/23/run-any-react-app-as-a-splunk-app/</guid>
      <description>If you want to run any React app (any React version, any toolkit) as a Splunk app, have a look at this gist:
 </description>
    </item>
    
    <item>
      <title>Key Value Editor for Splunk</title>
      <link>https://marcusschiesser.github.io/2021/11/09/key-value-editor-for-splunk/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/11/09/key-value-editor-for-splunk/</guid>
      <description>I wrote a Splunk app using the new React UI framework for editing KV stores, see https://github.com/zepdev/kveditor - feedback welcome!</description>
    </item>
    
    <item>
      <title>POST request from a Splunk app using the @splunk/splunk-utils package</title>
      <link>https://marcusschiesser.github.io/2021/11/08/post-request-from-a-splunk-app/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2021/11/08/post-request-from-a-splunk-app/</guid>
      <description>This snippet shows how to use the handleError and handleResponse functions from the splunk-utils package to send a POST request from a Splunk app:
 </description>
    </item>
    
  </channel>
</rss>
