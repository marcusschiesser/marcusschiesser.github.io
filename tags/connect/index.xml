<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>connect on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/tags/connect/</link>
    <description>Recent content in connect on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 10 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/tags/connect/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using username or token authentication in Splunk from Python</title>
      <link>https://marcusschiesser.github.io/2022/02/10/splunk-use-either-username-or-token-authentication/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/02/10/splunk-use-either-username-or-token-authentication/</guid>
      <description>For either using username or token authentication in Splunk, I wrote a small wrapper for the connect function.
The advantage compared to the existing connect function is that you can use the same line of code for both authentication methods depending on the parameters that you pass (here shown by using ENV variables):</description>
    </item>
    
    <item>
      <title>Proxy Your Requests With Grunt</title>
      <link>https://marcusschiesser.github.io/2015/03/13/proxy-your-requests-with-grunt/</link>
      <pubDate>Fri, 13 Mar 2015 06:30:30 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2015/03/13/proxy-your-requests-with-grunt/</guid>
      <description>Probably you&amp;rsquo;re already using grunt to serve your local frontend code. Everything is fine, but if you&amp;rsquo;re developing your backend with something different than JavaScript (Being a Java developer I heard that might happen), you will have problems accessing this backend while running grunt server. With grunt-connect-proxy there exists a grunt module to help you out. It basically delegates requests that match a given URL to a different backend of your choice.</description>
    </item>
    
  </channel>
</rss>
