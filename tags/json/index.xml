<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>json on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/tags/json/</link>
    <description>Recent content in json on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 01 Dec 2011 16:06:30 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using real POJOs (without JAXB Annotations) as transfer objects with JAX-RS </title>
      <link>https://marcusschiesser.github.io/2011/12/01/using-real-pojos-without-jaxb-annotations-as-transfer-objects-with-jax-rs/</link>
      <pubDate>Thu, 01 Dec 2011 16:06:30 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2011/12/01/using-real-pojos-without-jaxb-annotations-as-transfer-objects-with-jax-rs/</guid>
      <description>Are you annoyed that you have to annotate your POJOs with @XmlRootElement, so they can be used with JAX-RS? If your using Jersey as JAX-RS implementation your lucky: Just add to the &amp;lt;servlet&amp;gt; tag in your web.xml the following snippet:
&amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;com.sun.jersey.api.json.POJOMappingFeature&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt;  After restarting your servlet, your POJOs are marshalled to JSON as a charme. Enjoy!</description>
    </item>
    
    <item>
      <title>Building a JSON web service with Java and Axis2</title>
      <link>https://marcusschiesser.github.io/2009/01/23/building-a-json-web-service-with-java-and-axis2/</link>
      <pubDate>Fri, 23 Jan 2009 15:05:04 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/01/23/building-a-json-web-service-with-java-and-axis2/</guid>
      <description>It is said that in Java usually the easiest things are the hardest. The following is a nice example as it took me some time to figure out how to do it. I wanted to build a simple URL request based web service in Java that returns an JSON object. Yes, you can do that with a simple Servlet too, the advantage of using Axis2 is that you can also call your deployed services using SOAP without any configuration changes.</description>
    </item>
    
    <item>
      <title>JSON generator for picture data from Flickr</title>
      <link>https://marcusschiesser.github.io/2008/08/28/json-generator-fur-bilddaten-von-flickr/</link>
      <pubDate>Thu, 28 Aug 2008 22:11:42 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2008/08/28/json-generator-fur-bilddaten-von-flickr/</guid>
      <description>Probably a few other guys did this before, but I had a boring train journey without any internet connection, so I used the bits from my 3D album example and made a JSON generator for Flickr data. What does that mean? Just enter a search term and the program finds matching pictures on Flickr. If pictures have been found, a click on &amp;lsquo;JSON&amp;rsquo; displays a JSON-encoded array with the URLs and labels of the pictures found.</description>
    </item>
    
  </channel>
</rss>
