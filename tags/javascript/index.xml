<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>javascript on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Mar 2015 06:30:30 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Proxy Your Requests With Grunt</title>
      <link>https://marcusschiesser.github.io/2015/03/13/proxy-your-requests-with-grunt/</link>
      <pubDate>Fri, 13 Mar 2015 06:30:30 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2015/03/13/proxy-your-requests-with-grunt/</guid>
      <description>Probably you&amp;rsquo;re already using grunt to serve your local frontend code. Everything is fine, but if you&amp;rsquo;re developing your backend with something different than JavaScript (Being a Java developer I heard that might happen), you will have problems accessing this backend while running grunt server. With grunt-connect-proxy there exists a grunt module to help you out. It basically delegates requests that match a given URL to a different backend of your choice.</description>
    </item>
    
    <item>
      <title>How to detect whether an element is in a scrollable parent </title>
      <link>https://marcusschiesser.github.io/2009/11/02/how-to-detect-whether-an-element-is-in-a-scrollable-parent/</link>
      <pubDate>Mon, 02 Nov 2009 20:54:28 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/11/02/how-to-detect-whether-an-element-is-in-a-scrollable-parent/</guid>
      <description>Just think of having an element in a scrollable parent (the CSS property overflow is set to scroll) and you want to test whether the element is visible or not.
Using this little function you can do the trick:
function isInView(node){ var offsetParent = node.offsetParent; var top = offsetParent.scrollTop; var height = offsetParent.offsetHeight; var y = node.offsetTop; return y &amp;gt;= top &amp;amp;&amp;amp; y &amp;lt;= (top + height); }  And here&amp;rsquo;s a small use case - this one scrolls the element into the visible region, if it is not already in the view:</description>
    </item>
    
    <item>
      <title>Let the user select an item in a modal dialog</title>
      <link>https://marcusschiesser.github.io/2009/08/05/selecting-an-item-in-javascript/</link>
      <pubDate>Wed, 05 Aug 2009 13:31:29 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/08/05/selecting-an-item-in-javascript/</guid>
      <description>After having used the shiny new YUI3 library for a project, it&amp;rsquo;s about time to share my YUI3 experiences with you. For the project I built an item selector: A modal dialog is openend and the user has to select an item. After selection the dialog is closed and the selected item is passed to a callback function.
Here you can find the full source for the item selector. An example to use the selector can be as simple as this:</description>
    </item>
    
    <item>
      <title>Using Axis2 services from Javascript (by removing the XML namespaces)</title>
      <link>https://marcusschiesser.github.io/2009/01/27/using-axis2-services-from-javascript-by-removing-the-xml-namespaces/</link>
      <pubDate>Tue, 27 Jan 2009 17:15:13 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/01/27/using-axis2-services-from-javascript-by-removing-the-xml-namespaces/</guid>
      <description>If you want to call an Axis2 service from Javascript you will face the problem that the XML response of an Axis2 service call contains XML namespaces - something Javascript doesn&amp;rsquo;t like in cross-browser-friendly way. The idea to fix this issue is to make an XSLT transformation directly from Axis2 that removes the unnecessary namespaces.
First we need an XSLT transformation that will do the job:
&amp;lt;xsl:stylesheet version=&amp;quot;1.0&amp;quot; xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&amp;gt; &amp;lt;xsl:output indent=&amp;quot;no&amp;quot; method=&amp;quot;xml&amp;quot;&amp;gt;&amp;lt;/xsl:output&amp;gt; &amp;lt;xsl:template match=&amp;quot;/|comment()|processing-instruction()&amp;quot;&amp;gt; &amp;lt;xsl:copy&amp;gt; &amp;lt;xsl:apply-templates&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt; &amp;lt;/xsl:copy&amp;gt; &amp;lt;/xsl:template&amp;gt; &amp;lt;xsl:template match=&amp;quot;*&amp;quot;&amp;gt; &amp;lt;xsl:element name=&amp;quot;{local-name()}&amp;quot;&amp;gt; &amp;lt;xsl:apply-templates select=&amp;quot;@*|node()&amp;quot;&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt; &amp;lt;/xsl:element&amp;gt; &amp;lt;/xsl:template&amp;gt; &amp;lt;xsl:template match=&amp;quot;@*&amp;quot;&amp;gt; &amp;lt;xsl:attribute name=&amp;quot;{local-name()}&amp;quot;&amp;gt; &amp;lt;xsl:value-of select=&amp;quot;.</description>
    </item>
    
  </channel>
</rss>
