<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>namespaces on Marcus Schiesser</title>
    <link>https://marcusschiesser.github.io/tags/namespaces/</link>
    <description>Recent content in namespaces on Marcus Schiesser</description>
    <image>
      <url>https://marcusschiesser.github.io/papermod-cover.png</url>
      <link>https://marcusschiesser.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://marcusschiesser.github.io/tags/namespaces/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Copy K8s Secrets Between Namespaces With Updating</title>
      <link>https://marcusschiesser.github.io/2022/08/09/copy-k8s-secrets-between-namespaces-with-updating/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2022/08/09/copy-k8s-secrets-between-namespaces-with-updating/</guid>
      <description>K8S doesn&amp;rsquo;t allow to share secrets between namespaces for security reasons.
It might be acceptable from a security point of view to share secrets nevertheless - then a common workaround is to copy secrets between namespaces. One pattern is to keep a template of the secret in the default namespace and copy it from there to other namespaces.
Here&amp;rsquo;s a version of copying secrets between namespaces that also works if the destination secret already exists - in this case it&amp;rsquo;s just updated with the data from the source:</description>
    </item>
    
    <item>
      <title>Using Axis2 services from Javascript (by removing the XML namespaces)</title>
      <link>https://marcusschiesser.github.io/2009/01/27/using-axis2-services-from-javascript-by-removing-the-xml-namespaces/</link>
      <pubDate>Tue, 27 Jan 2009 17:15:13 +0000</pubDate>
      
      <guid>https://marcusschiesser.github.io/2009/01/27/using-axis2-services-from-javascript-by-removing-the-xml-namespaces/</guid>
      <description>If you want to call an Axis2 service from Javascript you will face the problem that the XML response of an Axis2 service call contains XML namespaces - something Javascript doesn&amp;rsquo;t like in cross-browser-friendly way. The idea to fix this issue is to make an XSLT transformation directly from Axis2 that removes the unnecessary namespaces.
First we need an XSLT transformation that will do the job:
&amp;lt;xsl:stylesheet version=&amp;quot;1.0&amp;quot; xmlns:xsl=&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&amp;gt; &amp;lt;xsl:output indent=&amp;quot;no&amp;quot; method=&amp;quot;xml&amp;quot;&amp;gt;&amp;lt;/xsl:output&amp;gt; &amp;lt;xsl:template match=&amp;quot;/|comment()|processing-instruction()&amp;quot;&amp;gt; &amp;lt;xsl:copy&amp;gt; &amp;lt;xsl:apply-templates&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt; &amp;lt;/xsl:copy&amp;gt; &amp;lt;/xsl:template&amp;gt; &amp;lt;xsl:template match=&amp;quot;*&amp;quot;&amp;gt; &amp;lt;xsl:element name=&amp;quot;{local-name()}&amp;quot;&amp;gt; &amp;lt;xsl:apply-templates select=&amp;quot;@*|node()&amp;quot;&amp;gt;&amp;lt;/xsl:apply-templates&amp;gt; &amp;lt;/xsl:element&amp;gt; &amp;lt;/xsl:template&amp;gt; &amp;lt;xsl:template match=&amp;quot;@*&amp;quot;&amp;gt; &amp;lt;xsl:attribute name=&amp;quot;{local-name()}&amp;quot;&amp;gt; &amp;lt;xsl:value-of select=&amp;quot;.</description>
    </item>
    
  </channel>
</rss>
